using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Invulnerability : MonoBehaviour
{
    [SerializeField] float invulnerabilityTime = 2f;
    [SerializeField] float blinkTime = 0.025f;

    public bool isInvulnerable { get; private set; } = false;

    Collider2D[] colliders;
    SpriteRenderer sr;
    Coroutine invulnerabilityRoutine;
    Coroutine blinkSpriteRoutine;

    // Start is called before the first frame update
    void Start()
    {
        colliders = GetComponents<Collider2D>();
        sr = GetComponent<SpriteRenderer>();
    }

    public void StopInvulnerability()
    {
        StopCoroutine(invulnerabilityRoutine);
    }

    public void StartInvulnerability()
    {
        if (invulnerabilityRoutine != null)
        {
            StopCoroutine(invulnerabilityRoutine);
        }

        invulnerabilityRoutine = StartCoroutine(InvulnerabilityRoutine());
    }

    IEnumerator InvulnerabilityRoutine()
    {
        /* The player has rigidbody and gravity
         * so when we disable the colliders it'll fall
         * we can disable the gravity or change the rigidbody body type
         * but other things will not work properly, like the jump
         * so I think the best way to make the player invulnerable
         * is to toggle a variable (isInvulnerable) blink the sprite renderer
         * and check it on the player collisions if it's invulnerable and do nothing.
         * 
         * OBS: If this game was a spaces hooter in which the gravity is set to zero
         * it'll work properly
        */

        isInvulnerable = true;

        /*foreach (Collider2D collider in colliders)
        {
            collider.enabled = false;
        }*/

        StartBlinkSprite();

        yield return new WaitForSeconds(invulnerabilityTime);

        /*foreach (Collider2D collider in colliders)
        {
            collider.enabled = true;
        }*/

        StopBlinkSprite();
        isInvulnerable = false;
    }

    public void StartBlinkSprite()
    {
        if (blinkSpriteRoutine != null)
        {
            StopCoroutine(blinkSpriteRoutine);
        }

        blinkSpriteRoutine = StartCoroutine(BlinkSprite());
    }

    public void StopBlinkSprite()
    {
        StopCoroutine(blinkSpriteRoutine);
        blinkSpriteRoutine = null;
        sr.enabled = true;
    }

    IEnumerator BlinkSprite()
    {
        yield return new WaitForSeconds(blinkTime);
        sr.enabled = !sr.enabled;
        StartBlinkSprite();
    }
}
